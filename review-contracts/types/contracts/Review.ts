/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ReviewInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LICENSE"
      | "ROI_DENOMINATOR"
      | "addAuthor"
      | "addReviewer"
      | "assignRndSeed"
      | "authors"
      | "castVote"
      | "getReviewer"
      | "getSelectedReviewers"
      | "getSubmission"
      | "owner"
      | "rawFulfillRandomWords"
      | "revealResult"
      | "reviewers"
      | "selectReviewers"
      | "setOptions"
      | "setThresholdToPass"
      | "submissions"
      | "submitData"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ResultRevealed" | "SubmissionCreated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "LICENSE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ROI_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAuthor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addReviewer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assignRndSeed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReviewer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSelectedReviewers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmission",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revealResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "selectReviewers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOptions",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setThresholdToPass",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submissions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "submitData", values: [string]): string;

  decodeFunctionResult(functionFragment: "LICENSE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROI_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAuthor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addReviewer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignRndSeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReviewer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSelectedReviewers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reviewers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selectReviewers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOptions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setThresholdToPass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitData", data: BytesLike): Result;
}

export namespace ResultRevealedEvent {
  export type InputTuple = [submissionId: BigNumberish, result: boolean];
  export type OutputTuple = [submissionId: bigint, result: boolean];
  export interface OutputObject {
    submissionId: bigint;
    result: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmissionCreatedEvent {
  export type InputTuple = [submissionId: BigNumberish];
  export type OutputTuple = [submissionId: bigint];
  export interface OutputObject {
    submissionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Review extends BaseContract {
  connect(runner?: ContractRunner | null): Review;
  waitForDeployment(): Promise<this>;

  interface: ReviewInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LICENSE: TypedContractMethod<[], [string], "view">;

  ROI_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  addAuthor: TypedContractMethod<[_author: AddressLike], [void], "nonpayable">;

  addReviewer: TypedContractMethod<
    [_reviewer: AddressLike],
    [void],
    "nonpayable"
  >;

  assignRndSeed: TypedContractMethod<
    [submissionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  authors: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  castVote: TypedContractMethod<
    [submissionIndex: BigNumberish, option: BigNumberish],
    [void],
    "nonpayable"
  >;

  getReviewer: TypedContractMethod<[index: BigNumberish], [string], "view">;

  getSelectedReviewers: TypedContractMethod<
    [submissionId: BigNumberish],
    [string[]],
    "view"
  >;

  getSubmission: TypedContractMethod<
    [submissionId: BigNumberish],
    [[string, string] & { author: string; data: string }],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  revealResult: TypedContractMethod<
    [submissionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  reviewers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  selectReviewers: TypedContractMethod<
    [submissionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOptions: TypedContractMethod<
    [submissionIndex: BigNumberish, options: string[]],
    [void],
    "nonpayable"
  >;

  setThresholdToPass: TypedContractMethod<
    [submissionIndex: BigNumberish, threshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  submissions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean, bigint] & {
        author: string;
        data: string;
        thresholdToPass: bigint;
        isApproved: boolean;
        seed: bigint;
      }
    ],
    "view"
  >;

  submitData: TypedContractMethod<[_data: string], [bigint], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LICENSE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROI_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addAuthor"
  ): TypedContractMethod<[_author: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addReviewer"
  ): TypedContractMethod<[_reviewer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assignRndSeed"
  ): TypedContractMethod<[submissionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authors"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [submissionIndex: BigNumberish, option: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getReviewer"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getSelectedReviewers"
  ): TypedContractMethod<[submissionId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getSubmission"
  ): TypedContractMethod<
    [submissionId: BigNumberish],
    [[string, string] & { author: string; data: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revealResult"
  ): TypedContractMethod<[submissionIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reviewers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "selectReviewers"
  ): TypedContractMethod<[submissionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOptions"
  ): TypedContractMethod<
    [submissionIndex: BigNumberish, options: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setThresholdToPass"
  ): TypedContractMethod<
    [submissionIndex: BigNumberish, threshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submissions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, boolean, bigint] & {
        author: string;
        data: string;
        thresholdToPass: bigint;
        isApproved: boolean;
        seed: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitData"
  ): TypedContractMethod<[_data: string], [bigint], "nonpayable">;

  getEvent(
    key: "ResultRevealed"
  ): TypedContractEvent<
    ResultRevealedEvent.InputTuple,
    ResultRevealedEvent.OutputTuple,
    ResultRevealedEvent.OutputObject
  >;
  getEvent(
    key: "SubmissionCreated"
  ): TypedContractEvent<
    SubmissionCreatedEvent.InputTuple,
    SubmissionCreatedEvent.OutputTuple,
    SubmissionCreatedEvent.OutputObject
  >;

  filters: {
    "ResultRevealed(uint256,bool)": TypedContractEvent<
      ResultRevealedEvent.InputTuple,
      ResultRevealedEvent.OutputTuple,
      ResultRevealedEvent.OutputObject
    >;
    ResultRevealed: TypedContractEvent<
      ResultRevealedEvent.InputTuple,
      ResultRevealedEvent.OutputTuple,
      ResultRevealedEvent.OutputObject
    >;

    "SubmissionCreated(uint256)": TypedContractEvent<
      SubmissionCreatedEvent.InputTuple,
      SubmissionCreatedEvent.OutputTuple,
      SubmissionCreatedEvent.OutputObject
    >;
    SubmissionCreated: TypedContractEvent<
      SubmissionCreatedEvent.InputTuple,
      SubmissionCreatedEvent.OutputTuple,
      SubmissionCreatedEvent.OutputObject
    >;
  };
}
